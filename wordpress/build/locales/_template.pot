msgid ""
msgstr ""
"X-Domain: gtbabel\n"

#. added: 2020-03-11 03:46:55
#. shared: 1
msgctxt "slug"
msgid "blog"
msgstr ""

#. added: 2020-03-11 03:46:55
msgctxt "slug"
msgid "wow-coole-sache"
msgstr ""

#. added: 2020-03-11 03:47:34
#. shared: 1
msgctxt "slug"
msgid "impressum"
msgstr ""

#. added: 2020-03-11 03:47:34
#. shared: 1
msgctxt "slug"
msgid "datenschutz"
msgstr ""

#. added: 2020-03-11 03:47:34
#. shared: 1
msgctxt "slug"
msgid "disclaimer"
msgstr ""

#. added: 2020-03-11 03:47:35
#. shared: 1
msgid "Cookies sind keine Kekse, Plätzchen oder Gebäck. Sie dienen in meinem Fall dazu, Besucherzahlen zu erfassen. Durch die weitere Nutzung der Webseite stimmst Du der Verwendung von Cookies zu."
msgstr ""

#. added: 2020-03-11 03:47:35
#. shared: 1
msgid "Schließen"
msgstr ""

#. added: 2020-03-11 03:47:35
#. shared: 1
msgid "Weitere Informationen"
msgstr ""

#. added: 2020-03-11 03:47:36
#. shared: 1
msgid "Vielhuber David"
msgstr ""

#. added: 2020-03-11 03:47:36
#. shared: 1
msgid "Über mich"
msgstr ""

#. added: 2020-03-11 03:47:36
#. shared: 1
msgid "Blog"
msgstr ""

#. added: 2020-03-11 03:47:36
msgid "Wow, coole Sache."
msgstr ""

#. added: 2020-03-11 03:47:37
msgid "Nope."
msgstr ""

#. added: 2020-03-11 03:47:37
msgid "Wow, <a>das</a> rockt."
msgstr ""

#. added: 2020-03-11 03:47:37
msgid "Zurück"
msgstr ""

#. added: 2020-03-11 03:47:37
#. shared: 1
msgid "Büroanschrift"
msgstr ""

#. added: 2020-03-11 03:47:38
#. shared: 1
msgid "close2 new media GmbH<br/>Auenstrasse 6<br/>80469 München"
msgstr ""

#. added: 2020-03-11 03:47:38
#. shared: 1
msgid "Kontaktdaten"
msgstr ""

#. added: 2020-03-11 03:47:38
#. shared: 1
msgid "Tel"
msgstr ""

#. added: 2020-03-11 03:47:38
#. shared: 1
msgid "Fax"
msgstr ""

#. added: 2020-03-11 03:47:39
#. shared: 1
msgid "Mail"
msgstr ""

#. added: 2020-03-11 03:47:39
#. shared: 1
msgid "GitHub"
msgstr ""

#. added: 2020-03-11 03:47:39
#. shared: 1
msgid "Twitter"
msgstr ""

#. added: 2020-03-11 03:47:39
#. shared: 1
msgid "Pinboard"
msgstr ""

#. added: 2020-03-11 03:47:40
#. shared: 1
msgid "Pinterest"
msgstr ""

#. added: 2020-03-11 03:47:40
#. shared: 1
msgid "YouTube"
msgstr ""

#. added: 2020-03-11 03:47:40
#. shared: 1
msgid "Shopware"
msgstr ""

#. added: 2020-03-11 03:47:41
#. shared: 1
msgid "Spotify"
msgstr ""

#. added: 2020-03-11 03:47:41
#. shared: 1
msgid "Dribbble"
msgstr ""

#. added: 2020-03-11 03:47:41
#. shared: 1
msgid "Xing"
msgstr ""

#. added: 2020-03-11 03:47:41
#. shared: 1
msgid "Google+"
msgstr ""

#. added: 2020-03-11 03:47:42
#. shared: 1
msgid "PGP"
msgstr ""

#. added: 2020-03-11 03:47:42
#. shared: 1
msgid "W3C Markup Validation"
msgstr ""

#. added: 2020-03-11 03:47:42
#. shared: 1
msgid "Google Lighthouse"
msgstr ""

#. added: 2020-03-11 03:47:43
#. shared: 1
msgid "Impressum"
msgstr ""

#. added: 2020-03-11 03:47:43
#. shared: 1
msgid "Datenschutz"
msgstr ""

#. added: 2020-03-11 03:47:43
#. shared: 1
msgid "Disclaimer"
msgstr ""

#. added: 2020-03-11 03:47:43
msgctxt "title"
msgid "Wow, coole Sache."
msgstr ""

#. added: 2020-03-11 03:47:43
msgctxt "title"
msgid "Vielhuber David"
msgstr ""

#. added: 2020-03-11 03:47:44
msgctxt "description"
msgid "Nope.  Wow, das rockt."
msgstr ""

#. added: 2020-03-10 02:04:27
msgctxt "slug"
msgid "wie-funktioniert-das"
msgstr ""

#. added: 2020-03-10 02:04:29
msgid "Wie funktioniert das?"
msgstr ""

#. added: 2020-03-10 02:04:29
msgid "Keine Ahnung!"
msgstr ""

#. added: 2020-03-10 02:04:29
msgctxt "title"
msgid "Wie funktioniert das?"
msgstr ""

#. added: 2020-03-10 02:04:30
msgctxt "description"
msgid "Keine Ahnung!"
msgstr ""

#. added: 2020-03-10 02:04:30
msgctxt "slug"
msgid "coole-rotze"
msgstr ""

#. added: 2020-03-10 02:04:33
msgid "Coole Rotzengrützenfotze."
msgstr ""

#. added: 2020-03-10 02:04:33
msgid "Wow."
msgstr ""

#. added: 2020-03-10 02:04:33
msgid "Das rockt ganz schön."
msgstr ""

#. added: 2020-03-10 02:04:33
msgid "Geiler Krampf."
msgstr ""

#. added: 2020-03-10 02:04:34
msgid "Roger."
msgstr ""

#. added: 2020-03-10 02:04:34
msgid "Wuuuuuuuuha."
msgstr ""

#. added: 2020-03-10 02:04:34
msgctxt "title"
msgid "Coole Rotzengrützenfotze."
msgstr ""

#. added: 2020-03-10 02:04:34
msgctxt "description"
msgid "Wow."
msgstr ""

#. added: 2020-03-10 02:04:35
msgctxt "slug"
msgid "dies-ist-eine-coole-rock"
msgstr ""

#. added: 2020-03-10 02:04:38
msgid "Dies ist eine coole Socke."
msgstr ""

#. added: 2020-03-10 02:04:38
msgid "Geile Scheiße."
msgstr ""

#. added: 2020-03-10 02:04:38
msgctxt "title"
msgid "Dies ist eine coole Socke."
msgstr ""

#. added: 2020-03-10 02:04:38
msgctxt "description"
msgid "Geile Scheiße."
msgstr ""

#. added: 2020-03-10 02:04:39
msgctxt "slug"
msgid "change-events-in-vanillajs-ok"
msgstr ""

#. added: 2020-03-10 02:04:42
msgid "Change-Events in VanillaJS auslösen"
msgstr ""

#. added: 2020-03-10 02:04:43
msgid "<a>VanillaJS</a> ist seit <a>ES6</a> quasi in allen Bereichen dem Urgestein <a>jQuery</a> ebenbürtig und inzwischen weit überlegen. So lohnt es sich, Legacy-Code nach und nach weg von jQuery zu migrieren. Martin ist der beste <a>Schachspieler</a> der Welt. Beim Auslösen von manuellen Change-Events muss man jedoch aufpassen. So triggert <a>document.addEventListener</a> beispielsweise nicht auf <a>jQuery.change()</a>. Die nachfolgende Übersicht fasst die Besonderheiten zusammen."
msgstr ""

#. added: 2020-03-10 02:04:44
msgctxt "title"
msgid "Change-Events in VanillaJS auslösen"
msgstr ""

#. added: 2020-03-10 02:04:44
msgctxt "description"
msgid "VanillaJS ist seit ES6 quasi in allen Bereichen dem Urgestein jQuery ebenbürtig und inzwischen weit überlegen. So lohnt es sich, Legacy-Code nach un..."
msgstr ""

#. added: 2020-03-10 02:04:46
msgctxt "slug"
msgid "cookies-kontrollieren-mit-php-und-js"
msgstr ""

#. added: 2020-03-10 02:04:49
msgid "Cookies kontrollieren mit PHP und JS"
msgstr ""

#. added: 2020-03-10 02:04:50
msgid "Das Setzen von Cookies durch eigene oder fremde Skripte lässt sich sowohl mit Hilfe von PHP und JavaScript fein steuern. Obwohl dies keine ausreichende Lösung für die Umsetzung von Cookie-Lösungen nach dem <a>Gerichtsurteil gegen Planet49</a> darstellt (hier ist es entscheidend, dass Tracking-Tools wie Google Analytics gar nicht erst nicht mittracken und damit in der Folge auch keine Cookies setzen), kann es sinnvoll sein, Cookies generell zu white-/blacklisten."
msgstr ""

#. added: 2020-03-10 02:04:50
msgid "In PHP ist dies einfach zu bewerkstelligen: Hier modifiziert/löscht man etwaig gesetzte <a>Set-Cookie-Header</a>. Ruft man folgendes Script auf, nachdem mit Hilfe von <a>setcookie</a> Cookies für den Response Header vorbereitet wurden, werden nicht gewünschte Header entfernt und damit diese Cookies gar nicht erst gesetzt. Außerdem werden in der Vergangenheit gesetzte Cookies (z.B. falls das Prevention-Script aus irgendeinem Grund nicht gegriffen hat), ebenfalls gelöscht."
msgstr ""

#. added: 2020-03-10 02:04:52
msgid "In JavaScript ist dies etwas weniger trivial: Hier überschreiben wir mit Hilfe von <a>Object.defineProperty</a> (dem mächtigen Nachfolger von <a>__defineGetter__</a> und <a>__defineSetter__</a>)  die Getter/Setter Methoden des Objekts document, die immer dann aufgerufen werden, wenn man mit Hilfe von <a>document.cookie</a> Cookies liest und schreibt. <a>Object.getOwnPropertyDescriptor</a> erhält dabei den originalen Getter/Setter, wobei man den Setter nur dann aufruft, wenn der Cookie auch erlaubt wird:"
msgstr ""

#. added: 2020-03-10 02:04:52
msgctxt "title"
msgid "Cookies kontrollieren mit PHP und JS"
msgstr ""

#. added: 2020-03-10 02:04:52
msgctxt "description"
msgid "Das Setzen von Cookies durch eigene oder fremde Skripte lässt sich sowohl mit Hilfe von PHP und JavaScript fein steuern. Obwohl dies keine ausreichen..."
msgstr ""

#. added: 2020-03-10 02:04:53
msgctxt "slug"
msgid "gerate-per-script-deaktivieren-in-windows"
msgstr ""

#. added: 2020-03-10 02:05:36
msgid "Geräte per Script deaktivieren in Windows"
msgstr ""

#. added: 2020-03-10 02:05:36
msgid "Um Strom zu sparen oder die eigene Überwachungs-Paranoia zu mindern, empfiehlt es sich, nicht benutzte Geräte am eigenen Rechner komplett vom Strom zu trennen. Geräte wie Soundboxen oder Webcams kann man ganz klassisch über den Geräte-Manager de/aktivieren. Das Ganze funktioniert aber auch per Script. Früher war hierfür der Standardweg <a>devcon</a>. Inzwischen bietet Windows 10 über die <a>PowerShell</a> einen bequemeren Weg, dies zu realisieren."
msgstr ""

#. added: 2020-03-10 02:05:37
msgid "Zunächst ermittelt man über den Geräte-Manager den Namen oder die Hardware-ID (Rechtsklick auf das jeweilige Gerät &gt; Details &gt; Gerätebeschreibung / Hardware-IDs). Alternativ geht das auch mit dem PowerShell Kommando <strong>Get-PnpDevice -PresentOnly</strong>. Nun legt man das folgende PowerShell-Script an:"
msgstr ""

#. added: 2020-03-10 02:05:37
msgid "Das Script zeigt automatisch den <a>UAC-Dialog</a>, da es Administratorrechte benötigt und lässt sich nun wiefolgt aufrufen:"
msgstr ""

#. added: 2020-03-10 02:05:37
msgid "XXX steht dabei für den Namen oder die Hardware-ID, YYY für die Werte enable oder disable (type kann auch weggelassen werden, dann wird der momentane Status jeweils negiert). Um das Ganze bequem per Verknüpfung aufzurufen, legt man diese einfach wiefolgt an:"
msgstr ""

#. added: 2020-03-10 02:05:38
msgid "Auch ein Autostart per <a>Aufgabenplanung</a> (mit den Optionen \"Ausführung unabhängig von der Benutzerkontensteuerung\" und \"mit höchsten Privilegien\") oder Steuerung per Tastatur-Hotkeys ist beispielsweise mit einem Tool wie <a>flimsy</a> ohne Weiteres möglich."
msgstr ""

#. added: 2020-03-10 02:05:38
msgctxt "title"
msgid "Geräte per Script deaktivieren in Windows"
msgstr ""

#. added: 2020-03-10 02:05:38
msgctxt "description"
msgid "Um Strom zu sparen oder die eigene Überwachungs-Paranoia zu mindern, empfiehlt es sich, nicht benutzte Geräte am eigenen Rechner komplett vom Strom ..."
msgstr ""

#. added: 2020-03-10 02:05:39
msgctxt "slug"
msgid "skype-background-blur"
msgstr ""

#. added: 2020-03-10 02:05:41
msgid "Skype Background Blur"
msgstr ""

#. added: 2020-03-10 02:05:42
msgid "<a>Skype</a> hat eine nette, etwas versteckte Funktion: Bei Videoübertragungen lässt sich durch Klick auf den Video-Button und der Funktion \"<strong>Meinen Hintergrund weichzeichnen</strong>\" ganz einfach der Hintergrund automatisch unscharf stellen. Mit Hilfe künstlicher Intelligenz funktioniert das mit jeder Kamera auch ohne Tiefeninformationen. Das Ganze wirkt dann professioneller und blendet private oder für das Gespräch unwichtige Dinge im Hintergrund aus."
msgstr ""

#. added: 2020-03-10 02:05:42
msgid "Um einen einen ähnlichen Effekt in allen anderen Programmen erzielen, in denen die Webcam zum Einsatz kommt, sind Tools wie <a>CyberLink PerfectCam</a> und <a>XSplit VCam</a> zu empfehlen."
msgstr ""

#. added: 2020-03-10 02:05:42
msgctxt "title"
msgid "Skype Background Blur"
msgstr ""

#. added: 2020-03-10 02:05:43
msgctxt "description"
msgid "Skype hat eine nette, etwas versteckte Funktion: Bei Videoübertragungen lässt sich durch Klick auf den Video-Button und der Funktion \"Meinen Hinterg..."
msgstr ""

#. added: 2020-03-10 02:05:43
msgctxt "slug"
msgid "opcache-php-bootup-optimierung"
msgstr ""

#. added: 2020-03-10 02:05:51
msgid "OPcache PHP Bootup Optimierung"
msgstr ""

#. added: 2020-03-10 02:05:51
msgid "Bei Webseiten, die beispielsweise auf <a>WordPress</a>, <a>Joomla</a> oder <a>Laravel</a> basieren und keinen userspezifischen Content haben, empfiehlt es sich, alle Seiten in einem statischen HTML-Cache vorzuhalten und den Cache nur bei Änderung im Backend manuell (oder automatisch) neu zu generieren. Beinhaltet die Seite jedoch dynamische Inhalte, die abhängig von Sessions und Cookies oder auch Sprache und Ort abhängen, eignet sich der Einsatz von <a>OPcache</a>."
msgstr ""

#. added: 2020-03-10 02:05:51
msgid "Dabei liegt die sog. Boot Time bei allen drei genannten Systemen bei einem frisch aufgesetzten CentOS7-Server (mit SSD und PHP 7.1) bei über 100 ms. Jedes Mal, wenn ein PHP-Script ausgeführt wird, muss dieses zur Laufzeit in Bytecode kompiliert werden. OPcache realisiert nun einen Cache für diesen Bytecode – wird nun beim nächsten Request dasselbe PHP-Script ausgeführt, muss es nicht rekompiliert werden. Nach dem Aktivieren von OPcache setzen wir folgende Einstellungen:"
msgstr ""

#. added: 2020-03-10 02:05:52
msgid "Die Ausführungszeit (gemittelt bei 10 Ausführungen) hat sich nun deutlich reduziert:"
msgstr ""

#. added: 2020-03-10 02:05:52
msgid "WordPress 4.7.4"
msgstr ""

#. added: 2020-03-10 02:05:52
msgid "Joomla 3.7"
msgstr ""

#. added: 2020-03-10 02:05:53
msgid "Laravel 5.4"
msgstr ""

#. added: 2020-03-10 02:05:53
msgid "ohne OPcache"
msgstr ""

#. added: 2020-03-10 02:05:53
msgid "295 ms"
msgstr ""

#. added: 2020-03-10 02:05:53
msgid "201 ms"
msgstr ""

#. added: 2020-03-10 02:05:53
msgid "110 ms"
msgstr ""

#. added: 2020-03-10 02:05:54
msgid "mit OPcache"
msgstr ""

#. added: 2020-03-10 02:05:54
msgid "54 ms"
msgstr ""

#. added: 2020-03-10 02:05:54
msgid "59 ms"
msgstr ""

#. added: 2020-03-10 02:05:54
msgid "13 ms"
msgstr ""

#. added: 2020-03-10 02:05:55
msgid "Faktor"
msgstr ""

#. added: 2020-03-10 02:05:55
msgid "Da wir bei den Einstellung validate_timestamps auf 0 und gleichzeitig revalidate_freq auf die Dauer von einem Tag gesetzt haben, wird der Cache quasi nie automatisch neu aufgebaut (das machen wir bewusst manuell). Mit einem kleinen <a>Git-Hook</a> wird bei jedem \"pull\" ein PHP-Script ausgeführt. So aktiviert man den Hook:"
msgstr ""

#. added: 2020-03-10 02:05:55
msgid "Folgende Helferfunktion ist außerdem behilflich, um einzelne Code-Teile (oder die gesamte Ausführungszeit) zu messen:"
msgstr ""

#. added: 2020-03-10 02:05:56
msgid "Will man hilfreiche Infos wie Status, genutzten Memory oder gecachte Filezahl erhalten, nutzt man diese PHP-Funktion:"
msgstr ""

#. added: 2020-03-10 02:05:56
msgid "Um in den Genuss von OPcache auch in einer lokalen Entwicklungsumgebung zu kommen (was generell nicht empfehlenswert ist), bedienen wir uns eines Tricks."
msgstr ""

#. added: 2020-03-10 02:05:57
msgid "OPcache ist auf allen Servern, die das OPcache-Modul installiert haben und bei denen die Einstellung opcache.enable nicht explizit gesetzt ist, aktiv. Das lassen wir auch so. Wir setzen lediglich in der php.ini opcache.validate_timestamps = 1. Damit greift opcache.revalidate_freq = 2. Damit erreichen wir, dass bei jedem Projekt OPcache quasi ständig revalidiert. Bei denjenigen Projekten, bei denen wir OPcache dauerhaft aktivieren wollen, setzen wir projektbezogen <span>in der .htaccess folgende Einstellung:</span>"
msgstr ""

#. added: 2020-03-10 02:05:57
msgid "Danach starten wir den Webserver neu und legen folgendes Script an:"
msgstr ""

#. added: 2020-03-10 02:05:57
msgid "Dieses Script löscht den Cache und baut ihn gleichzeitig neu auf. Nun setzen wir im Lieblingseditor <a>VSCode</a> ein workspace-bezogenes <a>RunOnSave</a>-Kommando fest:"
msgstr ""

#. added: 2020-03-10 02:05:57
msgctxt "title"
msgid "OPcache PHP Bootup Optimierung"
msgstr ""

#. added: 2020-03-10 02:05:58
msgctxt "description"
msgid "Bei Webseiten, die beispielsweise auf WordPress, Joomla oder Laravel basieren und keinen userspezifischen Content haben, empfiehlt es sich, alle Seite..."
msgstr ""

#. added: 2020-03-10 02:05:59
msgctxt "slug"
msgid "svg-export-aus-illustrator"
msgstr ""

#. added: 2020-03-10 02:06:02
msgid "SVG Export aus Illustrator"
msgstr ""

#. added: 2020-03-10 02:06:02
msgid "Im heutigen Web spielen SVGs eine zentrale Rolle. Sie haben nicht nur Iconfonts verdrängt, sondern bieten auch die Möglichkeit der Manipulation via CSS oder JavaScript. Will man eine Vektorgrafik für das Web aus <a>Adobe Illustrator</a> als SVG abspeichern, sind einige Einstellungen zu treffen, um Fallstricke zu vermeiden und Ladezeiten zu reduzieren, die ich im nachfolgenden Artikel vorstelle."
msgstr ""

#. added: 2020-03-10 02:06:03
msgid "Die allgemeine Exportfunktion findet man unter \"<strong>Datei &gt; Exportieren &gt; Exportieren als...</strong>\". Schließlich wählt man bei Dateityp \"<strong>SVG (*.SVG)</strong>\" aus. Will man transparente Bereiche nicht beschneiden und die Zeichenfläche berücksichtigen, setzt man einen Haken bei \"<strong>Zeichenflächen verwenden</strong>\", ansonsten nicht. Im nachfolgenden Dialog wählt man folgende Optionen aus:"
msgstr ""

#. added: 2020-03-10 02:06:03
msgid "Ist man mit dem Detailgrad der Pfade im Ergebnis nicht zufrieden, erhöht man sukzessive die Dezimalstellen auf 3 oder 4."
msgstr ""

#. added: 2020-03-10 02:06:03
msgid "Interessant wird es, wenn man in der Vektordatei Schnittmasken eingebettet hat. Man kann diese ebenfalls eliminieren (das führt zu erneut geringeren Dateigrößen sowie zu erhöhter Kompatibilität bei der Verwendung von Druck-Tools wie <a>dompdf</a>)."
msgstr ""

#. added: 2020-03-10 02:06:04
msgid "Hier gibt es im Illustrator zwei bekannte Wege: Zunächst markiert man alle Objekte mit STRG+A und wählt \"<strong>Objekt &gt; Transparenz reduzieren...</strong>\" aus. Anschließend entfernt man über \"<strong>Objekt &gt; Schnittmaske &gt; Zurückwandeln</strong>\" die bestehenden Schnittmasken. Wenn das nicht klappt, macht man statt der beiden letzten Schritte folgendes: Zunächst wählt man \"<strong>Objekt &gt; Umwandeln... &gt; OK</strong>\" aus und anschließend im Pathfinder-Dialog die Option \"<strong>Überlappungsbereich entfernen</strong>\":"
msgstr ""

#. added: 2020-03-10 02:06:04
msgid "Das finale SVG kann man dann nochmals mit Tools wie <a>svgo</a> (auf der Kommandozeile oder im <a>Web-GUI</a>) weiter optimieren."
msgstr ""

#. added: 2020-03-10 02:06:05
msgctxt "title"
msgid "SVG Export aus Illustrator"
msgstr ""

#. added: 2020-03-10 02:06:05
msgctxt "description"
msgid "Im heutigen Web spielen SVGs eine zentrale Rolle. Sie haben nicht nur Iconfonts verdrängt, sondern bieten auch die Möglichkeit der Manipulation via ..."
msgstr ""

#. added: 2020-03-10 02:12:56
msgctxt "slug"
msgid "project-euler-lattice-paths"
msgstr ""

#. added: 2020-03-10 02:12:59
msgid "Project Euler: Lattice paths"
msgstr ""

#. added: 2020-03-10 02:13:00
msgid "<a>Project Euler</a> ist eine Serie von spannenden Programmier-Problemen, die oft einen mathematisch Hintergrund haben. Die Probleme sind oft so gestellt, das man raffinierte Algorithmen entwickeln muss, um in einer vernünftigen Laufzeit zum Ziel zu kommen. Heute lösen wir <a>Problem 15: Lattice paths</a>, bei dem man mit einfachen kombinatorischen Mitteln an die Lösung kommt."
msgstr ""

#. added: 2020-03-10 02:13:00
msgid "Die Frage lautet wie folgt:"
msgstr ""

#. added: 2020-03-10 02:13:01
msgid "„Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.  How many such routes are there through a 20×20 grid?“"
msgstr ""

#. added: 2020-03-10 02:13:01
msgid "Die Problemstellung lässt sich auch anders formulieren: Gesucht ist die Mächtigkeit der Teilmenge aller Wege"
msgstr ""

#. added: 2020-03-10 02:13:01
msgid "Es handelt sich hier um ein einfaches kombinatorisches Problem, bei dem wir das Urnenmodell heranziehen (ohne Zurücklegen und ohne Beachtung der Reihenfolge). Wir sind nun genau an denjenigen Wegen interessiert, für die gilt, dass <span class=\"notranslate\">\\(R\\)</span> und <span class=\"notranslate\">\\(D\\)</span> genau gleich oft vorkommen. Demnach ergibt sich für alle möglichen Kombinationen:"
msgstr ""

#. added: 2020-03-10 02:13:02
msgid "Für <span class=\"notranslate\">\\(n=20\\)</span> ergibt sich damit:"
msgstr ""

#. added: 2020-03-10 02:13:02
msgid "Wir können das Problem auf nicht-quadratische Grids erweitern. Nachfolgende Lösung realisiert in PHP mit Hilfe von <a>bcmath</a> mit einer Laufzeit von <span class=\"notranslate\">\\( O(n) \\)</span> eine Berechnung mit dem Eingabeformat \"Anzahl der Testfälle, <span class=\"notranslate\">\\(n_1\\)</span> <span class=\"notranslate\">\\(m_1\\)</span>, ...\":"
msgstr ""

#. added: 2020-03-10 02:13:02
msgid "Alle Probleme des Euler Projects lassen sich auf der empfehlenswerten Seite <a>HackerRank</a> übrigens auch online lösen."
msgstr ""

#. added: 2020-03-10 02:13:03
msgctxt "title"
msgid "Project Euler: Lattice paths"
msgstr ""

#. added: 2020-03-10 02:13:03
msgctxt "description"
msgid "Project Euler ist eine Serie von spannenden Programmier-Problemen, die oft einen mathematisch Hintergrund haben. Die Probleme sind oft so gestellt, da..."
msgstr ""

#. added: 2020-03-10 02:13:04
msgctxt "slug"
msgid "automatische-wordpress-updates"
msgstr ""

#. added: 2020-03-10 02:13:10
msgid "Automatische WordPress-Updates"
msgstr ""

#. added: 2020-03-10 02:13:10
msgid "<a>WordPress</a> hat seit Version <a>3.7</a> Background Updates nativ implementiert und automatisch für Minor Releases aktiviert. Man kann mit Hilfe von <a>Filtern</a> das Verhalten genauer steuern, was genau automatisch aktualisiert wird. Eine permanente, vollautomatische Installation aller Minor-, Major-, Plugin-, Theme- und Translation-Updates ist jedoch nicht vorgesehen, jedoch leicht anderweitig zu bewerkstelligen."
msgstr ""

#. added: 2020-03-10 02:13:12
msgid "Es <a>gibt</a> <a>zahlreiche</a> <a>Plugins</a>, die zwar die Häufigkeit des Abrufs der Notifications erhöhen und teilweise die Durchführung der eigentlichen Updates auch versprechen; Das gelingt aber keinem dieser Plugins zuverlässig. Eine (nicht nur für diesen Zweck) sehr geeignete Lösung bietet das mächtige Kommandozeilentool <a>WP-CLI</a>. Nach kurzer <a>Installation</a> sorgen die folgenden Zeilen (ausgeführt im WP-Projektordner) dafür, dass alle Updates der oben genannten Komponenten ausnahmslos installiert werden:"
msgstr ""

#. added: 2020-03-10 02:13:12
msgid "Folgender Oneliner (den man über ein <a>Alias</a> oder mit Tools wie <a>flimsy</a> kürzen kann) kann auf beliebigen SSH-Servern (auch ohne vorher installiertem WP-CLI) ausgeführt werden, um dort alle Updates auf einen Schlag zu installieren:"
msgstr ""

#. added: 2020-03-10 02:13:13
msgid "Der --allow-root Flag sorgt für die Lauffähigkeit auf Systemen als Root-User (in <a>WSL</a>-Umgebungen ist das unabdingbar). Ein Update jeglicher Komponenten ohne vorheriges Testen in einer lokalen Entwicklungsumgebung ist in keinem Fall zu empfehlen. Hat man jedoch eine abgeschirmte WP-Umgebung oder einen speziellen Use-Case, immer mit den neuesten Updates versorgt sein zu wollen, lässt sich das Ganze auch über einen simplen Cronjob in Form einer Bash-Datei automatisieren:"
msgstr ""

#. added: 2020-03-10 02:13:15
msgid "WP-CLI kann noch vieles mehr: User-Rollen hinzufügen, Kommentare löschen, Strings in Datenbanken suchen und ersetzen, Mediendateien importieren... es lohnt sich ein Blick in die <a>Dokumentation</a>. Momentan habe ich zwei <a>Github</a>-<a>Issues</a> eröffnet, die kleine Bugs im <a>Language-Modul</a> betreffen, jedoch einem Einsatz in Produktivumgebungen nicht im Wege stehen."
msgstr ""

#. added: 2020-03-10 02:13:15
msgctxt "title"
msgid "Automatische WordPress-Updates"
msgstr ""

#. added: 2020-03-10 02:13:15
msgctxt "description"
msgid "WordPress hat seit Version 3.7 Background Updates nativ implementiert und automatisch für Minor Releases aktiviert. Man kann mit Hilfe von Filtern da..."
msgstr ""

#. added: 2020-03-10 02:13:16
msgctxt "slug"
msgid "google-sheets-formeln-ausdehnen"
msgstr ""

#. added: 2020-03-10 02:13:19
msgid "Google Sheets: Formeln ausdehnen"
msgstr ""

#. added: 2020-03-10 02:13:21
msgid "Um  innerhalb von Google Sheets Formeln auf ganze Spalten auszudehnen, empfiehlt sich der Einsatz der nützlichen Funktion <a>ARRAYFORMULA</a>. Leider funktioniert diese nicht in Kombination mit einigen anderen wichtigen Funktionen wie <a>QUERY</a> oder <a>INDIREKT</a>, weshalb eine komplette Individualprogrammierung der Logik mit Hilfe von <a>Google Apps Script</a> oder alternativ das manuelle Kopieren der Formel bis hin zur letzten Zeile übrig bleibt."
msgstr ""

#. added: 2020-03-10 02:13:21
msgid "Als Alternative bauen wir uns für die zweite Variante eine kleine Hilfsfunktion, die in allen Tabellenblättern in Zeile 2 nach Formeln sucht und diese automatisch bis ans Ende der Tabellen kopiert. Dabei werden ARRAYFORMULA-Formeln automatisch ignoriert. Das Ganze fügt man über <strong>Tools &gt; Skripteditor</strong> ein und lässt diese über <strong>Bearbeiten &gt; Trigger des aktuellen Projekts</strong> zeitgesteuert 1x pro Minute laufen:"
msgstr ""

#. added: 2020-03-10 02:13:21
msgctxt "title"
msgid "Google Sheets: Formeln ausdehnen"
msgstr ""

#. added: 2020-03-10 02:13:22
msgctxt "description"
msgid "Um innerhalb von Google Sheets Formeln auf ganze Spalten auszudehnen, empfiehlt sich der Einsatz der nützlichen Funktion ARRAYFORMULA. Leider funktio..."
msgstr ""

#. added: 2020-03-10 02:13:23
msgctxt "slug"
msgid "das-simpson-paradoxon"
msgstr ""

#. added: 2020-03-11 03:47:56
msgid "Webentwicklung aus Leidenschaft"
msgstr ""

#. added: 2020-03-11 03:47:57
msgid "Mein Name ist David Vielhuber. Ich bin Full-Stack Developer, zweifacher Papa und habe eine Schwäche für guten Kaffee und Code. Ich habe ein Faible für schönes Design, eine Prise Perfektionismus und Augen für klare Konturen. Vor 20 Jahren begann ich eine Liebesbeziehung mit meinem Computer – und kurz darauf mit dem Internet."
msgstr ""

#. added: 2020-03-11 03:47:57
msgid "Im Laufe der Jahre wandelte sich meine Leidenschaft vom Hobby zum Beruf. Eine Vielzahl spannender Kundenprojekte aus den letzten Jahren führten mich dazu, neben Privatpersonen auch kleinen und mittelständischen Unternehmen ein großes Leistungsspektrum – von Web bis Print – anzubieten. Inzwischen bin ich ein Teil der <a>close2 new media GmbH</a> in München."
msgstr ""

#. added: 2020-03-11 03:47:58
msgctxt "title"
msgid "David Vielhuber"
msgstr ""

#. added: 2020-03-11 03:47:58
msgctxt "title"
msgid "Full-Stack Developer aus München"
msgstr ""

#. added: 2020-03-11 03:47:58
msgctxt "description"
msgid "? Vielhuber David ist ein Web-Geek mit einem Faible für schönes Design, einer Prise Perfektionismus und Augen für klare Konturen. ?"
msgstr ""
